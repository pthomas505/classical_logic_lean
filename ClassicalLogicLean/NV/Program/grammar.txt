start = definition* notation* theorem*


definition = 'definition' name '(' name* ')' ':' formula ';'

notation = 'notation' name '(' name* ')' ':' literal+ ';'
literal = name | '$' notation_char+ '$'
notation_char = some character from a restricted set of ascii characters


theorem = 'theorem' name? hypothesis* formula proof

hypothesis = '(' name ':' formula ')'

proof = '(' (instruction ';')* ')'


formula = '(' formula ')' | pred | eq | in | true | false | not | imp | and | or | iff | forall | exists


pred = name '(' (name (',' name)*)? ')'
eq = '(' name '=' name ')'
in = '(' name 'in.' name ')'
true = 'T.'
false = 'F.'
not = '~' formula
imp = '(' formula '->' formula ')'
and = '(' formula '/\' formula ')'
or = '(' formula '\/' formula ')'
iff = '(' formula '<->' formula ')'
forall = 'A.' name formula
exists = 'E.' name formula


name = (letter | '_') (letter | digit | '_')*

letter = ('a' | ... | 'z' | 'A' | ... | 'Z')
digit = '0' | ... | '9'


instruction = ?

-----

theorem prop_id (P() -> P())
(
  1. prop_2 P() (P() -> P()) P();
  2. prop_1 P() (P() -> P());
  3. mp 1 2;
  4. prop_1 P() P();
  5. mp 3 4;
)

theorem (Q() -> Q())
(
  prop_id [P() -> Q()];
)

theorem (P() -> P())
(
  intro a1;
  a1;
)

theorem (h1 : P()) (h2 : Q()) P()
(
  h1;
)

theorem prop_id (h1 : P()) P()
(
  h1;
)

theorem eq_id (x = x)
(
  admit;
)

theorem eq_id A. x (x = x)
(
  admit;
)

-----

A. x P()
A. x P(x)
A. x P(x y)
A. x (x = x)
A. x (x in. x)
A. x ~ (x = x)
A. x ~ (x in. x)
(A. x E. y (x = y) -> (y in. z))
(~ P() -> P())
~ (P() -> (P() -> P()))

-----

# zero or more comma separated terminals

seq -> item remainder | EOI .
remainder -> "," item remainder | EOI .

-----

# zero or more terminals

seq -> item seq | EOI .

-----

formula -> name afterName | kwFormula .

afterName -> "(" name_seq .
name_seq -> name name_seq_remainder | ")" .
name_seq_remainder -> "," name name_seq_remainder | ")" .

kwFormula -> "(" afterParen | "T." | "F." | "~" formula | "A." name formula | "E." name formula .

afterParen -> name afterParenName | kwFormula afterParenFormula .

afterParenName -> afterName afterParenFormula | "=" name ")" | "in." name ")" .

afterParenFormula -> ")" | "->" formula ")" | "/\\" formula ")" | "\\/" formula ")" | "<->" formula ")" .


-----


formula -> "(" formula ")" | pred | eq | in | true | false | not | imp | and | or | iff | forall | exists .

pred -> name "(" name_seq ")" .
name_seq -> name name_seq_remainder | .
name_seq_remainder -> "," name name_seq_remainder | .

eq -> "(" name "=" name ")" .
in -> "(" name "in." name ")" .
true -> "T." .
false -> "F." .
not -> "~" formula .
imp -> "(" formula "->" formula ")" .
and -> "(" formula "/\\" formula ")" .
or -> "(" formula "\/" formula ")" .
iff -> "(" formula "<->" formula ")" .
forall -> "A." name formula .
exists -> "E." name formula .


-----


formula -> formula_100 | formula_200 | formula_300 .

formula_100 -> true | false | not | forall | exists .

true -> "T." .
false -> "F." .
not -> "~" formula .
forall -> "A." name formula .
exists -> "E." name formula .

formula_200 -> name "(" name_seq .
name_seq -> name name_seq_remainder | ")" .
name_seq_remainder -> "," name name_seq_remainder | ")" .


formula_300 -> "(" formula_400 .
formula_400 -> formula ")" | formula_500 | formula_600 .


formula_500 -> eq | in .

eq -> "=" name ")" .
in -> "in" name ")" .


formula_600 -> imp | and | or | iff .

imp -> "->" formula ")" .
and -> "/\\" formula ")" .
or -> "\\/" formula ")" .
iff -> "<->" formula ")" .


name -> name_head_char name_tail .
name_tail -> name_tail_char name_tail | EOI .

name_head_char -> alpha | underscore .
name_tail_char -> alpha | digit | underscore .


alpha -> lower_case | upper_case .

lower_case -> "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" .

upper_case -> "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" .

digit -> "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" .

underscore -> "_" .
